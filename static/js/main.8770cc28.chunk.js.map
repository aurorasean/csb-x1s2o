{"version":3,"sources":["styled.ts","App.tsx","index.tsx"],"names":["Container","styled","div","Card","CardHeader","CardContent","CardFooter","Blocker","amount","value","console","log","Print","imageUrl","completeAmount","hasPrint","height","width","src","alt","useState","completePercentage","setCompletePercentage","setHasPrint","handlePercentageChange","onClick","App","rootElement","document","getElementById","render"],"mappings":"qLAEaA,EAAYC,IAAOC,IAAV,mYAmBTC,EAAOF,IAAOC,IAAV,6JAQJE,EAAaH,IAAOC,IAAV,qFAKVG,EAAcJ,IAAOC,IAAV,wGAMXI,EAAaL,IAAOC,IAAV,yLAUVK,EAAUN,IAAOC,IAAV,8IAKT,YAAiB,IAAdM,EAAa,EAAbA,OACJC,EAAS,IAAaD,EAE5B,OADAE,QAAQC,IAAI,CAAEH,SAAQC,UAChB,GAAN,OAAUA,EAAV,S,OClDEG,EAAQ,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,SAAUC,EAA2C,EAA3CA,eAAgBC,EAA2B,EAA3BA,SAEzC,OADAL,QAAQC,IAAI,CAAEI,WAAUD,mBACnBC,EAaH,qCACE,cAAC,EAAD,CAAeP,OAAQM,IACvB,qBAAKE,OAAO,QAAQC,MAAM,QAAQC,IAAKL,EAAUM,IAAI,sBAbrD,mCACE,qBACEH,OAAO,QACPC,MAAM,QACNC,IAAI,uEACJC,IAAI,gBAYRhB,EAAO,WACX,MAAoDiB,mBAAS,GAA7D,mBAAOC,EAAP,KAA2BC,EAA3B,KACA,EAAgCF,oBAAS,GAAzC,mBAAOL,EAAP,KAAiBQ,EAAjB,KAMMC,EAAyB,SAAChB,GAC9BE,QAAQC,IAAI,CAAEH,WACdc,EAAsBd,GACtBe,GAAY,IAGd,OADAb,QAAQC,IAAI,CAAEI,WAAUM,uBAEtB,eAAC,EAAD,WACE,cAAC,EAAD,UACE,iDAEF,cAAC,EAAD,UACE,cAAC,EAAD,CACEN,SAAUA,EACVF,SAAS,kFACTC,eAAgBO,MAGpB,eAAC,EAAD,WACE,gDACA,wBAAQI,QAAS,kBAxBrBH,EAAsB,QACtBC,GAAY,IAuBR,sBACA,wBAAQE,QAAS,kBAAMD,EAAuB,IAA9C,oBACA,wBAAQC,QAAS,kBAAMD,EAAuB,KAA9C,qBACA,wBAAQC,QAAS,kBAAMD,EAAuB,KAA9C,qBACA,wBAAQC,QAAS,kBAAMD,EAAuB,KAA9C,qBACA,wBAAQC,QAAS,kBAAMD,EAAuB,MAA9C,6BAKO,SAASE,IACtB,OACE,cAAC,EAAD,UACE,cAAC,EAAD,MClEN,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,cAACJ,EAAD,IAASC,K","file":"static/js/main.8770cc28.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  font-family: sans-serif;\r\n\r\n  button {\r\n    background-color: rgb(0 255 255 / 65%);\r\n    border: 1px solid rgb(0 0 0 / 25%);\r\n    border-radius: 4px;\r\n    margin-left: 4px;\r\n    margin-right: 4px;\r\n  }\r\n  button:hover {\r\n    background-color: rgb(0 255 255 / 100%);\r\n  }\r\n`;\r\n\r\nexport const Card = styled.div`\r\n  min-width: 20em;\r\n  max-width: 250px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  border: 1px solid rgb(0 255 255 / 50%);\r\n`;\r\n\r\nexport const CardHeader = styled.div`\r\n  height: 4em;\r\n  background-color: rgb(196, 196, 196);\r\n`;\r\n\r\nexport const CardContent = styled.div`\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  display: flex;\r\n`;\r\n\r\nexport const CardFooter = styled.div`\r\n  height: 4em;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  background-color: rgb(196 196 196 / 50%);\r\n`;\r\n\r\n// calc the width based on input and then remove the amount from the width\r\nexport const Blocker = styled.div<{ amount: number }>`\r\n  background-color: rgba(0, 255, 0, 0.5);\r\n  position: absolute;\r\n  z-index: 1;\r\n  height: 250px;\r\n  width: ${({ amount }) => {\r\n    const value = (250 / 100) * amount;\r\n    console.log({ amount, value });\r\n    return `${value}px`;\r\n  }};\r\n`;\r\n","import { useState } from \"react\";\nimport * as Style from \"./styled\";\n\ninterface PrintProps {\n  imageUrl: string;\n  completeAmount: number;\n  hasPrint: boolean;\n}\nconst Print = ({ imageUrl, completeAmount, hasPrint }: PrintProps) => {\n  console.log({ hasPrint, completeAmount });\n  if (!hasPrint) {\n    return (\n      <>\n        <img\n          height=\"250px\"\n          width=\"250px\"\n          src=\"https://www.mehrallies.co.tz/shop/img/core-img/no_products_found.png\"\n          alt=\"no print\"\n        />\n      </>\n    );\n  }\n  return (\n    <>\n      <Style.Blocker amount={completeAmount}></Style.Blocker>\n      <img height=\"250px\" width=\"250px\" src={imageUrl} alt=\"customer print\" />\n    </>\n  );\n};\nconst Card = () => {\n  const [completePercentage, setCompletePercentage] = useState(0);\n  const [hasPrint, setHasPrint] = useState(false);\n  const handleNoPrint = () => {\n    setCompletePercentage(0);\n    setHasPrint(false);\n  };\n\n  const handlePercentageChange = (amount: number) => {\n    console.log({ amount });\n    setCompletePercentage(amount);\n    setHasPrint(true);\n  };\n  console.log({ hasPrint, completePercentage });\n  return (\n    <Style.Card>\n      <Style.CardHeader>\n        <h1>Active Prints</h1>\n      </Style.CardHeader>\n      <Style.CardContent>\n        <Print\n          hasPrint={hasPrint}\n          imageUrl=\"https://cdn.thingiverse.com/assets/b5/f4/ba/84/df/featured_preview_single_2.jpg\"\n          completeAmount={completePercentage}\n        />\n      </Style.CardContent>\n      <Style.CardFooter>\n        <span>Test buttons</span>\n        <button onClick={() => handleNoPrint()}>No print</button>\n        <button onClick={() => handlePercentageChange(0)}>Set 0%</button>\n        <button onClick={() => handlePercentageChange(25)}>Set 25%</button>\n        <button onClick={() => handlePercentageChange(50)}>Set 50%</button>\n        <button onClick={() => handlePercentageChange(75)}>Set 75%</button>\n        <button onClick={() => handlePercentageChange(100)}>Set 100%</button>\n      </Style.CardFooter>\n    </Style.Card>\n  );\n};\nexport default function App() {\n  return (\n    <Style.Container>\n      <Card />\n    </Style.Container>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}